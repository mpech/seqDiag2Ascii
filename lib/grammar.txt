sd2a                 +:parsedGroup;
parsedGroup           :instructionGroup;
parsedGroup           :fallbackLine;
fallbackLine          :_anyLine;
instructionGroup     +:genericInstruction;
anyInstructionGroup   :instructionGroup;
anyInstructionGroup   :null;
genericInstruction    :_anyWs,instruction,_anyWs,_backLine;
genericInstruction    :_emptyLine,_backLine;
instruction           :message;
instruction           :title;
instruction           :alternative;
instruction           :opt;
instruction           :loop;
instruction           :note;
note                  :_note,_anyWs,_leftRight,_anyWs,_of,_anyWs,_actor,_commaSeparator,_text;
message               :_actor,_anyNonChar,_arrow,_anyNonCharDash,_actor,_commaSeparator,_text;
title                 :_title,_anyWs,_text;
anyElse               :_anyWs,_else,anyCondition,_backLine,anyInstructionGroup;
anyElse               :null;
alternative           :_alt,condition,_backLine,anyInstructionGroup,anyElse,_end;
loop                  :_loop,condition,_backLine,anyInstructionGroup,_end;
opt                   :_opt,condition,_backLine,anyInstructionGroup,_end;
condition             :_anyWs,_condition,_anyWs;
anyCondition          :condition;
anyCondition          :null;
_text                 :^([^\s]+[ \t]*)*[^\s]+;
_condition            :^([^\s]+[ \t]*)*[^\s]+;
_emptyLine            :^[ \t]*;
_anyWs                :^[\t ]*;
_anyNonChar           :^[^a-zA-Z0-9-=]*;
_anyNonCharDash       :^[^\w]*;
_backLine             :^\n;
_title                :^title;
_actor                :^\w+;
_commaSeparator       :^[\s ]*:[\s ]*;
_arrow                :^[-=]+>;
_alt                  :^alt[\w]*;
_loop                 :^loop;
_opt                  :^opt;
_note                 :^note;
_of                   :^of;
_leftRight            :^left|right;
_end                  :^[\t ]*end[\t ]*;
_else                 :^else;
_anyLine              :^[^\n]*\n;
